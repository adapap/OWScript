#import "lib/effects"
#import "lib/events"
#import "lib/gui"
#import "lib/util"

%SpawnBoss(boss)
    Teleport
        boss_player
        boss_spawns[Index(boss_heroes, boss)]

%ResetPlayer()
    pvar location = 0
    pvar cur_boss = 0
    pvar bosses_killed = 0
    pvar money = 0
    pvar damage_scale = 1
    pvar damage_scale_cost = 5
    pvar reload_speed = 2.0
    pvar reload_speed_cost = 15
    pvar money_multiplier = 1
    pvar money_multiplier_cost = 10
    pvar hp = 10
    pvar hp_cost = 100
    pvar defense = 100
    pvar defense_cost = 25
    pvar ability1 = False
    pvar ability2 = False
    pvar money_cd = 0
    pvar damage_cd = 0
    Set Damage Dealt(Event Player, pvar damage_scale)
    Set Damage Received(Event Player, pvar defense)
    Set Max Health(Event Player, pvar hp)
    Set Primary Fire Enabled(Event Player, True)
    Set Ability 1 Enabled(Event Player, False)
    Set Ability 2 Enabled(Event Player, False)

Rule "Initialize Constants"
    Global()
    Actions
        sound = Sound()
        messager = Messager()
        /* Define Player Variables */
        pvar location = 0
        pvar cur_boss = 0
        pvar bosses_killed = 0
        pvar money = 0
        pvar damage_scale = 1
        pvar damage_scale_cost = 5
        pvar reload_speed = 2.0
        pvar reload_speed_cost = 15
        pvar money_multiplier = 1
        pvar money_multiplier_cost = 10
        pvar hp = 10
        pvar hp_cost = 100
        pvar defense = 100
        pvar defense_cost = 25
        pvar ability1 = False
        pvar ability2 = False
        pvar money_cd = 0
        pvar damage_cd = 0
        /* Global Variables */
        shop_pos = <2.500, 3.500, 75>
        player_spawns = [<-40, -1.5, 145.5>, <-29, 8, 56>, <-77.5, 1.5, 65.5>, <-50.5, 1.5, 117>, <43.5, 3.5, 73.5>, <-115, 1.5, 112.5>]
        boss_spawns = [<-31.5, 0, 148>, <-22.5, 7.5, 66.5>, <-82.5, 1.5, 61>, <-59, 1, 104>, <53.5, 3.5, 72.5>, <-129, 2.5, 108.5>]
        boss_heroes = [Hero(Roadhog), Hero(Soldier: 76), Hero(Mei), Hero(Lucio), Hero(Ana), Hero(Reaper)]
        ability2_pos = <12.5, 2.5, 71>
        ability1_pos = <12.5, 2.5, 71 + 2.5>
        ability1_cost = 25000
        ability2_cost = 10000
        Set Match Time(90min)

Rule "Initialize Player Stats"
    EachPlayer(Team 1)
    Actions
        /* Player Variables */
        ResetPlayer()
        pvar credits = 0
        pvar save_code = []

Rule "Initialize Effects (Portals / Upgrades / Saves / Boundaries)"
    Global()
    Actions
        portals = [<-50, 1, 137.350>, <-37, 6.5, 48>, <-71, 1.5, 62.5>, <-58, 2, 122>, <41, 3.5, 78.5>, <-118.5, 1.5, 99.5>]
        next_boss_portals = [<-55, 1.5, 141.5>, <-25.5, 7.5, 50.5>, <-80, 1.5, 71>, <-63, 2.5, 115.5>, <41, 3.5, 67.5>]
        next_boss_cost = [1000, 12.5 * 1000, 75 * 1000, 350 * 1000, 1500 * 1000]
        shop_portal = <-7, 3, 75>
        upgr_pos = <3, 2.5, 70>
        save_pos = <3.5, 6.5, 86>
        prestige_pos = <-172, 3, 96>
        soldier_temp_pos = <3, 3, 77.5>
        x_offset = <2.5, 0, 0>
        z_offset = <0, 0, 2.5>
        upgrade_names = ["Heal", "Damage", "Faster", "Money", "Defend"]
        upgrade_rates = [100, 1.003, 1.04, 1.045, 1.03]
        upgrade_positions = []
        for i in range(-2, 3):
            upgrade_positions.append(upgr_pos + i * x_offset)
        upgrade_colors = [Purple, Red, Yellow, Green, Blue]
        // Bosses 1-6 -> Shop
        for portal in portals:
            UpgradePortal(portal)
        ShopPortal(shop_portal)
        // HP, Damage, Reload Speed, Money Multiplier, Damage Resistance
        for i in range(5):
            UpgradeEffect(upgrade_positions[i], upgrade_colors[i])
        // Next Boss
        for i in range(5):
            NextBossPortal(next_boss_portals[i], `Next Boss: {}`(next_boss_cost[i]))
        Portal(prestige_pos, Bad Aura, Red, `Start Over`)
        // Saves
        SaveIcon(save_pos - z_offset, Arrow: Up, Green)
        SaveIcon(save_pos + z_offset, Arrow: Down, Red)
        SaveIcon(save_pos - x_offset, Arrow: Left, Blue)
        SaveIcon(save_pos + x_offset, Arrow: Right, Yellow)
        // Abilities
        UpgradeEffect(ability1_pos, White)
        UpgradeEffect(ability2_pos, White)
        UpgradeEffect(soldier_temp_pos, Blue)
        GameText(All Players(Team 1), `Buy Ability 1: {}`(ability1_cost), ability1_pos + Up * 0.5, 1.5)
        GameText(All Players(Team 1), `Buy Ability 2: {}`(ability2_cost), ability1_pos + Up * 0.5, 1.5)
        GameText(All Players(Team 1), `Unlock {}: {} Credit`(Hero(Soldier: 76), 1), soldier_temp_pos + Up * 0.5, 1.5)
        // Secrets
        secret2_pos = <31, 2.5, 49.5>
        CodeText(Players In Radius(secret2_pos, 5, Team(All), Off), ["Left", "Up", "Down", "Up", "Right"], secret2_pos, 0.75)

Rule "Initialize Player HUD Stats"
    EachPlayer(Team 1)
    Actions
        BigHud(Top, `Money: {}`(pvar money), White)
        SmallHud(Top, `{} Credits ({} / {} Boss Kills)`(pvar credits, pvar bosses_killed, 6), Purple)
        SmallHud(Top, `{}% Money`(pvar money_multiplier * 100), Green)
        SmallHud(Top, `{} Sec`(pvar reload_speed), Yellow)
        SmallHud(Top, `Damage: {}% / Defend: {}%`(pvar damage_scale, pvar defense), Red)
        // Player Stats Over Head
        World Text
            Visible_To: All Players(Team 1)
            Header: `Damage: {}% - {} sec - {}% Money`
                pvar damage_scale
                pvar reload_speed
                pvar money_multiplier * 100
            Position: Event Player
            Scale: 0.750
            Clipping: Clip Against Surfaces
            Reevaluation: Visible To Position And String

Rule "Validate Bosses"
    Global()
    Conditions
        not All True
            boss_heroes
            Is Hero Being Played
                Cur Elem
                Team 2
    Actions
        Msg
            Everyone
            `Warning: Bad Bosses`
        for boss in boss_heroes:
            if not Is Hero Being Played(boss, Team 2):
                Msg
                    Everyone
                    `No {}`(boss)
        Wait(20s)
        Loop If Condition Is True

%BossMovement(hero_, speed)
    Set Move Speed(Players On Hero(hero_, Team 2), speed)
    Clear Status(Players On Hero(hero_, Team 2), Rooted)
Rule "Initialize Bosses"
    Global()
    Conditions
        All True
            boss_heroes
            Has Spawned
                Players On Hero
                    Cur Elem
                    Team 2
    Actions
        for boss in boss_heroes:
            boss_player = Players On Hero(boss, Team 2)
            SpawnBoss(boss)
            Set Move Speed(boss_player, 0)
            Set Status(boss_player, Null, Rooted, 9999)
            GameText(Everyone, `Heal: {}`(Health(Players On Hero(boss, Team 2))), Players On Hero(boss, Team 2), 1)
        BossMovement(Hero(Mei), 10)
        BossMovement(Hero(Lucio), 100)
        BossMovement(Hero(Reaper), 100)

Rule "Respawn Bosses"
    Event
        Player Died
        Team 2
        All
    Actions
        Respawn(Event Player)
        Wait(0.1s)
        Teleport(Event Player, boss_spawns[Index(boss_heroes, Event Player.hero)])

Rule "Initialize Upgrade Text"
    EachPlayer(Team 1)
    Actions
        UpgradeText(0, pvar hp_cost)
        UpgradeText(1, pvar damage_scale_cost)
        UpgradeText(2, pvar reload_speed_cost)
        UpgradeText(3, pvar money_multiplier_cost)
        UpgradeText(4, pvar defense_cost)

Rule "Teleport to Shop"
    EachPlayer(Team 1)
    Conditions
        Any True
            Array: portals
            Condition: Distance Between
                Event Player
                Cur Elem
            <= 2.0
    Actions
        Warp(Event Player, shop_pos, upgr_pos)
        WooshSound()
        pvar location = -1

Rule "Teleport from Shop"
    EachPlayer(Team 1)
    Conditions
        Distance Between
            Event Player
            shop_portal
        <= 2.0
        pvar location == -1
    Actions
        pvar location = pvar cur_boss
        Wait(0.1s)
        Warp(Event Player, player_spawns[pvar location], Closest Player To(Event Player, Team 2))
        WooshSound()

Rule "Shop Boundary & Heal"
    EachPlayer(Team 1)
    Conditions
        pvar location == -1
    Actions
        while pvar location == -1:
            Heal(Event Player, Null, 10000)
            Wait(0.1s)
            Skip If(Not((Event Player.pos.x <= -12) or (Event Player.pos.z <= 25)), 6)
            Warp(Event Player, shop_pos, upgr_pos)
            Msg(Event Player, `Avoid Going Here`)
            FailSound()

%BossBoundary(loc, hero_)
    if Event Player in All Players(Team 1):
        if pvar location == loc:
            Teleport(Event Player, player_spawns[pvar cur_boss])
            Msg(Event Player, `Avoid Going Here`)
            FailSound()
    elif Event Player.hero == hero_:
        Teleport(Event Player, boss_spawns[Index(boss_heroes, hero_)])

Rule "Boss Boundaries (Soldier: 76)"
    EachPlayer(All)
    Conditions
        Event Player.pos.y < 4.5
    Actions
        BossBoundary(1, Hero(Soldier: 76))
        Wait(2s)
        Loop If Condition Is True
Rule "Boss Boundaries (Mei)"
    EachPlayer(All)
    Conditions
        Event Player.pos.x > -72
    Actions
        BossBoundary(2, Hero(Mei))
        Wait(2s)
        Loop If Condition Is True
Rule "Boss Boundaries (Lucio)"
    EachPlayer(All)
    Conditions
        not Event Player in Players In Radius(boss_spawns[3], 20, Team(All), Off)
    Actions
        BossBoundary(3, Hero(Lucio))
        Wait(2s)
        Loop If Condition Is True
Rule "Boss Boundaries (Reaper)"
    EachPlayer(All)
    Conditions
        Event Player.pos.x > -94
    Actions
        BossBoundary(5, Hero(Reaper))
        Wait(2s)
        Loop If Condition Is True

%ShopCondition(pos)
    Conditions
        Event Player in Players In Radius(pos, 1.5, Team(All), Surfaces)
        Event Player.interacting
%ShopAutobuy
    Skip If(Not(Event Player.crouching), 2)
    Wait(0.1s)
    Loop If Condition Is True
Rule "Buy HP"
    EachPlayer(Team 1)
    ShopCondition(upgrade_positions[0])
    Actions
        if pvar money >= pvar hp_cost:
            pvar money -= pvar hp_cost
            pvar hp_cost = ceil(pvar hp_cost + upgrade_rates[0])
            pvar hp += 10
            Set Max Health(Event Player, pvar hp)
            SuccessSound()
            ShopAutobuy()
        else:
            MissingFunds()
            FailSound()

Rule "Buy Damage %"
    EachPlayer(Team 1)
    ShopCondition(upgrade_positions[1])
    Actions
        if pvar money >= pvar damage_scale_cost:
            pvar money -= pvar damage_scale_cost
            Skip If(pvar damage_scale >= 75, 1)
            pvar damage_scale += 3
            Skip If(pvar damage_scale < 75, 1)
            pvar damage_scale += 2
            Set Damage Dealt(Event Player, pvar damage_scale)
            pvar damage_scale_cost = ceil(pvar damage_scale_cost ^ upgrade_rates[1])
            SuccessSound()
            ShopAutobuy()
        else:
            MissingFunds()
            FailSound()

Rule "Buy Reload Speed"
    EachPlayer(Team 1)
    ShopCondition(upgrade_positions[2])
    Actions
        if pvar money >= pvar reload_speed_cost:
            pvar money -= pvar reload_speed_cost
            pvar reload_speed_cost = ceil(pvar reload_speed_cost ^ upgrade_rates[2])
            pvar reload_speed = max(pvar reload_speed * 0.95, 0)
            SuccessSound()
            ShopAutobuy()
        else:
            MissingFunds()
            FailSound()

Rule "Buy Money Multiplier"
    EachPlayer(Team 1)
    ShopCondition(upgrade_positions[3])
    Actions
        if pvar money >= pvar money_multiplier_cost:
            pvar money -= pvar money_multiplier_cost
            pvar money_multiplier_cost = ceil(pvar money_multiplier_cost ^ upgrade_rates[3])
            pvar money_multiplier += 0.075
            SuccessSound()
            ShopAutobuy()
        else:
            MissingFunds()
            FailSound()

Rule "Buy Defense"
    EachPlayer(Team 1)
    ShopCondition(upgrade_positions[4])
    Actions
        if (pvar money >= pvar defense_cost) and (pvar defense > 5):
            pvar money -= pvar defense_cost
            pvar defense_cost = ceil(pvar defense_cost ^ upgrade_rates[4])
            pvar defense = Max(pvar defense - 2, 5)
            Set Damage Received(Event Player, pvar defense)
            SuccessSound()
            ShopAutobuy()
        elif pvar defense == 5:
            Msg(Event Player, `Max Defend`)
            FailSound()
        else:
            MissingFunds()
            FailSound()

Rule "Buy Ability 1"
    EachPlayer(Team 1)
    ShopCondition(ability1_pos)
    Actions
        if (pvar money >= ability1_cost) and (not pvar ability1):
            pvar money -= ability1_cost
            pvar ability1 = True
            Set Ability 1 Enabled(Event Player, True)
            SuccessSound()
        elif pvar ability1:
            Msg(Event Player, `You Bought Ability 1`)
            FailSound()
        else:
            MissingFunds()

Rule "Buy Ability 2"
    EachPlayer(Team 1)
    ShopCondition(ability2_pos)
    Actions
        if (pvar money >= ability2_cost) and (not pvar ability2):
            pvar money -= ability2_cost
            pvar ability2 = True
            Set Ability 2 Enabled(Event Player, True)
            SuccessSound()
        elif pvar ability2:
            Msg(Event Player, `You Bought Ability 2`)
            FailSound()
        else:
            MissingFunds()

Rule "Teleport Player to Start"
    EachPlayer(Team 1)
    Conditions
        Has Spawned(Event Player)
    Actions
        Teleport
            Event Player
            player_spawns[pvar cur_boss]

Rule "Shooting Control"
    EachPlayer(Team 1)
    Conditions
        Has Spawned(Event Player)
        Is Firing Primary(Event Player)
    Actions
        Set Primary Fire Enabled(Event Player, False)
        Wait(pvar reload_speed)
        Set Primary Fire Enabled(Event Player, True)

Rule "Attack Money"
    Event
        Player Dealt Damage
        Team 1
        All
    Actions
        pvar money += ceil((Event Damage ^ (1 + pvar cur_boss / 3.5)) * pvar money_multiplier)

Rule "Boss Kill"
    Event
        Player Dealt Final Blow
        Team 1
        All
    Actions
        pvar money += (100 ^ (1 + pvar cur_boss / 2)) * pvar money_multiplier
        pvar bosses_killed = Max(Index(boss_heroes, Victim.hero) + 1, pvar bosses_killed)
        if pvar bosses_killed == 6:
            Msg(Event Player, `Find Start Over`)

Rule "Player Death"
    Event
        Player Died
        Team 1
        All
    Actions
        Wait(0.1s)
        pvar location = -1
        Warp(Event Player, shop_pos, upgr_pos)

Rule "Next Boss"
    EachPlayer(Team 1)
    Conditions
        Event Player in Players In Radius(next_boss_portals[pvar cur_boss], 2, Team(All), Off)
    Actions
        if (pvar money >= next_boss_cost[pvar cur_boss]) and (pvar bosses_killed > pvar cur_boss):
            pvar money -= next_boss_cost[pvar cur_boss]
            pvar cur_boss += 1
            Wait(0.1s)
            Warp(Event Player, player_spawns[pvar cur_boss], boss_spawns[pvar cur_boss])
            pvar location = pvar cur_boss
            WooshSound()
        elif pvar money < next_boss_cost[pvar cur_boss]:
            MissingFunds()
            FailSound()
        else:
            Big Msg(Event Player, `Go Kill Boss`)
            FailSound()

%SaveInput(name, value, pos)
    Rule "Save Input " + name
        EachPlayer(Team 1)
        Conditions
            Distance Between(Event Player, pos) <= 1.25
            Event Player.interacting
        Actions
            Msg(Event Player, name)
            pvar save_code.append(value)
            BoomSound()

SaveInput("Up", 0, save_pos - z_offset)
SaveInput("Down", 1, save_pos + z_offset)
SaveInput("Left", 2, save_pos - x_offset)
SaveInput("Right", 3, save_pos + x_offset)

%UnlockHero(hero_)
    pvar save_code_effect = Last Text Id
    Destroy In-World Text(pvar save_code_effect)
    Set Hero(Event Player, hero_)
    Wait(0.5s)
    Big Msg(Event Player, `You Unlocked {}`(Hero Icon String(hero_)))
    SuccessSound()
    Wait(0.25)

Rule "Buy Prestige Item"
    EachPlayer(Team 1)
    ShopCondition(soldier_temp_pos)
    Actions
        if pvar credits >= 1:
            pvar credits -= 1
            UnlockHero(Hero(Soldier: 76))
        else:
            Big Msg(Event Player, `Defeat Final Boss`)

Rule "Check Save Code"
    EachPlayer(Team 1)
    Conditions
        Count Of(pvar save_code) == 5
    Actions
        // 0: Up
        // 1: Down
        // 2: Left
        // 3: Right
        if pvar save_code == [0, 0, 0, 0, 0]:
            UnlockHero(Hero(McCree))
            CodeText(Event Player, ["Up", "Up", "Up", "Up", "Up"], save_pos + Up * 1.25, 2)
        elif pvar save_code == [3, 1, 2, 3, 2]:
            UnlockHero(Hero(Soldier: 76))
            CodeText(Event Player, ["Right", "Down", "Left", "Right", "Left"], save_pos + Up * 1.25, 2)
        elif pvar save_code == [0, 2, 2, 1, 3]:
            UnlockHero(Hero(Ashe))
            CodeText(Event Player, ["Up", "Left", "Left", "Down", "Right"], save_pos + Up * 1.25, 2)
        elif pvar save_code == [2, 3, 2, 0, 0]:
            UnlockHero(Hero(Genji))
            CodeText(Event Player, ["Left", "Right", "Left", "Up", "Up"], save_pos + Up * 1.25, 2)
        elif pvar save_code == [1, 1, 3, 1, 2]:
            UnlockHero(Hero(Hanzo))
            CodeText(Event Player, ["Down", "Down", "Right", "Down", "Left"], save_pos + Up * 1.25, 2)
        elif pvar save_code == [2, 0, 1, 0, 3]: // Secrets
            Big Msg(Event Player, "Hacked")
            // You Unlocked Hidden Save 2
        else:
            Big Msg(Event Player, `Unknown Save`)
        pvar save_code = []

Rule "Prestige Confirm"
    EachPlayer(Team 1)
    Conditions
        Distance Between(Event Player, prestige_pos) <= 1.5
    Actions
        Msg(Event Player, `Start Over? (Jump)`)

Rule "Prestige"
    EachPlayer(Team 1)
    Conditions
        Distance Between(Event Player, prestige_pos) <= 1.5
        Event Player.jumping
    Actions
        if pvar bosses_killed == 6:
            ResetPlayer()
            pvar credits += 1
            Set Slow Motion(10)
            Big Msg(Everyone, `{} Started Over`(Event Player))
            Wait(1.25s)
            Set Slow Motion(100)
            Warp(Event Player, player_spawns[0], boss_spawns[0])
            Msg(Event Player, `{} Credits`(pvar credits))
            SuccessSound()
        else:
            Big Msg(Event Player, `Defeat Final Boss`)
            

Rule "Money Bonus (Ability 2 / E)"
    EachPlayer(Team 1)
    Conditions
        Is Using Ability 2(Event Player)
    Actions
        if pvar money_cd == 0:
            pvar money_cd = 45
            pvar gain = (5000 ^ (1 + pvar cur_boss / 15)) * pvar money_multiplier
            pvar money += pvar gain
            Msg(Event Player, `{} + {} Money!`("", pvar gain))
        else:
            Msg(Event Player, `Cooldown: {} sec`(pvar money_cd))

Rule "Damage Bonus (Ability 1 / Shift)"
    EachPlayer(Team 1)
    Conditions
        Is Using Ability 1(Event Player)
    Actions
        if pvar damage_cd == 0:
            pvar damage_cd = 60
            pvar damage_gain = pvar damage_scale / 2
            Set Damage Dealt(Event Player, pvar damage_scale + pvar damage_gain)
            Msg(Event Player, `{}% More Damage ({} sec)`(50, 5))
            Wait(5s)
            Set Damage Dealt(Event Player, pvar damage_scale - pvar damage_gain)
        else:
            Msg(Event Player, `Cooldown: {} sec`(pvar damage_cd))

Rule "Money/Damage Cooldowns"
    EachPlayer(Team 1)
    Conditions
        (pvar damage_cd > 0) or (pvar money_cd > 0)
    Actions
        if pvar damage_cd > 0:
            pvar damage_cd -= 1
        if pvar money_cd > 0:
            pvar money_cd -= 1
        Wait(1s)
        Loop If Condition Is True

Rule "Secret 1" // Flight after jumping by statue
    EachPlayer(Team 1)

Rule "Secret 2" // Grandma giving passive income every 5s?
    EachPlayer(Team 1)

Rule "Secret 3" // 30% faster ability cooldowns
    EachPlayer(Team 1)

Disabled Rule "Coordinate Viewer"
    EachPlayer(Team 1)
    Conditions
        Has Spawned(Event Player)
        Event Player.moving
        Event Player.crouching
        Is Communicating Any Voice Line(Event Player)
    Actions
        Create Effect
            Visible_To: Event Player
            Type: Sphere
            Color: White
            Pos: Event Player.facing + Event Player.eyepos
            Radius: 0.20
            Reevaluation: Visible To Position And Radius
        Create Hud Text
            Visible_To: Event Player
            Header: Null
            Subheader: Null
            Text: Event Player.facing + Event Player.eyepos
            Location: Left
            Sort_Order: Null
            Header_Color: White
            Subheader_Color: White
            Text_Color: White
            Reevaluation: Visible To And String

Disabled Rule "Cheats"
    EachPlayer(Team 1)
    Conditions
        Event Player.jumping
    Actions
        pvar money += 1000000
        pvar reload_speed = 0.01
        Set Damage Received(Event Player, 0)
        Set Damage Dealt(Event Player, 10000)